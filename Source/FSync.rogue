#===============================================================================
# FSync.rogue
# November 5, 2020
#===============================================================================

$requireRogue "1.12.2"

$define VERSION "FSync v1.1"
$define AUTHOR "December 26, 2021 by Abe Pralle"

uses Utility/CommandLineParser
try
  FSync( System.command_line_arguments )
catch (error:Error)
  Console.error.println "="*80
  Console.error.println "ERROR"
  Console.error.println error->String.word_wrapped(78).indented(2)
  Console.error.println "="*80
  System.exit 1
endTry

class FSync
  METHODS
    method init( args:String[] )
      local command = CommandLineParser().
      [
        option( "--dry",      &aliases=["--dry-run","-d"] )
        option( "--exclude=", &alias="-x", &multi )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--keep",     &aliases=["--keep-unused","-k"] )
        option( "--missing",  &alias="-m" )
        option( "--quiet",    &alias="-q" )
      ].parse( System.command_line_arguments )

      if (command//options//help)
        print_usage
        System.exit
      endIf

      local destination_filepath = "."
      which (command//args.count)
        case 0, 1
          print_usage
          System.exit
        case 2
          destination_filepath = command//args[1]->String
        others
          throw Error( "Too many filepaths given." )
      endWhich

      local source_filepath = command//args[0]->String

      if (not File.exists(source_filepath))
        throw Error( "Source filepath does not exist: " + source_filepath )
      endIf

      local exclude_fn : Function(String)->Logical
      if (command//options//exclude.count)
        exclude_fn =
          function(filepath:String)->Logical with (list=command//options//exclude)
            if (filepath.matches_pattern( (forEach in list)->String )) return true
            return false
          endFunction
      endIf

      if (File.is_folder(source_filepath))
        if (not File.is_folder(destination_filepath))
          File.create_folder( destination_filepath )
          if (not File.is_folder(destination_filepath))
            throw Error( "Unable to create folder " + destination_filepath )
          endIf
        endIf
        File.sync_from( source_filepath, destination_filepath, &verbose=not command//options//quiet,
          &dry_run=command//options//dry->Logical, &keep_unused=command//options//keep->Logical,
          &missing_only=command//options//missing->Logical, &exclude=exclude_fn )

      else
        if (File.is_folder(destination_filepath))
          destination_filepath = File.ensure_ends_with_separator( destination_filepath )
          destination_filepath += File.filename(source_filepath)
        endIf
        if (File.is_different_than(source_filepath,destination_filepath))
          if (not exclude_fn or not exclude_fn(destination_filepath))
            if (not command//options//quiet) println "$ -> $" (source_filepath,destination_filepath)
            if (not command//options//dry)   File.copy( source_filepath, destination_filepath )
          endIf
        endIf
      endIf

    method print_usage
      println VERSION
      println AUTHOR
      println
      println @|
               |USAGE
               |  fsync [OPTIONS] source-filepath destination-filepath
               |
               |OPTIONS
               |  --dry-run, --dry, -d
               |    Print file copy messages without actually copying them.
               |    Should not be used with --quiet.
               |
               |  --exclude=<pattern>, -x <pattern>
               |    Exclude any files matching the given pattern from being copied or deleted.
               |    Multiple --exclude patterns can be given. Example: '--exclude="**/Web/*"'.
               |
               |  --help, -h, -?
               |    Show this help text.
               |
               |  --keep-unused, --keep, -k
               |    Do not delete files that are in destination but no longer in source.
               |
               |  --missing, -m
               |    Only copy missing files.
               |
               |  --quiet, -q
               |    Do not print file copy actions.
endClass
